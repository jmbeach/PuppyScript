<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>~/Code/School/CS403/PuppyScript/antlr/PuppyScript.g4.xhtml</title>
<meta name="Generator" content="Vim/7.4" />
<meta name="plugin-version" content="vim7.4_v2" />
<meta name="syntax" content="antlr4" />
<meta name="settings" content="no_progress,number_lines,ignore_folding,use_xhtml,use_css,pre_wrap,no_foldcolumn,expand_tabs,line_ids,prevent_copy=" />
<meta name="colorscheme" content="default" />
<style type="text/css">

pre { white-space: pre-wrap; font-family: monospace; color: #000000; background-color: #ffffff; }
body { font-family: monospace; color: #000000; background-color: #ffffff; }
* { font-size: 1em; }
.Constant { color: #c00000; }
.Type { color: #008000; }
.Comment { color: #0000c0; }
.LineNr { color: #af5f00; }
.Special { color: #c000c0; }
.Statement { color: #af5f00; }
.PreProc { color: #c000c0; }

</style>

<script type='text/javascript'>
//<![CDATA[

/* function to open any folds containing a jumped-to line before jumping to it */
function JumpToLine()
{
  var lineNum;
  lineNum = window.location.hash;
  lineNum = lineNum.substr(1); /* strip off '#' */

  if (lineNum.indexOf('L') == -1) {
    lineNum = 'L'+lineNum;
  }
  lineElem = document.getElementById(lineNum);
  /* Always jump to new location even if the line was hidden inside a fold, or
   * we corrected the raw number to a line ID.
   */
  if (lineElem) {
    lineElem.scrollIntoView(true);
  }
  return true;
}
if ('onhashchange' in window) {
  window.onhashchange = JumpToLine;
}

//]]>
</script>
</head>
<body onload='JumpToLine();'>
<pre id='vimCodeElement'>
<span id="L1" class="LineNr">  1 </span><span class="Comment">/*</span>
<span id="L2" class="LineNr">  2 </span><span class="Comment">Author: Jared Beach</span>
<span id="L3" class="LineNr">  3 </span><span class="Comment">Description: Grammar for PuppyScript</span>
<span id="L4" class="LineNr">  4 </span><span class="Comment">language. Tries to sort rules from</span>
<span id="L5" class="LineNr">  5 </span><span class="Comment">highest to lowest levels</span>
<span id="L6" class="LineNr">  6 </span><span class="Comment">*/</span>
<span id="L7" class="LineNr">  7 </span><span class="Statement">grammar</span> <span class="PreProc">PuppyScript</span><span class="Statement">;</span>
<span id="L8" class="LineNr">  8 </span>
<span id="L9" class="LineNr">  9 </span><span class="Comment">// statements</span>
<span id="L10" class="LineNr"> 10 </span><span class="Comment">// last thing computed is returned</span>
<span id="L11" class="LineNr"> 11 </span><span class="Type">statement</span><span class="Statement">:</span> <span class="Type">variableDeclaration</span>
<span id="L12" class="LineNr"> 12 </span> <span class="Statement">|</span> <span class="Type">ifStatement</span>
<span id="L13" class="LineNr"> 13 </span> <span class="Statement">|</span> <span class="Type">whileLoop</span>
<span id="L14" class="LineNr"> 14 </span> <span class="Statement">|</span> <span class="Type">functionDeclaration</span>
<span id="L15" class="LineNr"> 15 </span> <span class="Statement">|</span> <span class="Type">lambdaCall</span> <span class="PreProc">SEMI</span>
<span id="L16" class="LineNr"> 16 </span> <span class="Statement">|</span> <span class="Type">expr</span> <span class="PreProc">SEMI</span>
<span id="L17" class="LineNr"> 17 </span> <span class="Statement">|</span> <span class="PreProc">SEMI</span>
<span id="L18" class="LineNr"> 18 </span> <span class="Statement">|</span> <span class="PreProc">BR</span>
<span id="L19" class="LineNr"> 19 </span> <span class="Statement">;</span>
<span id="L20" class="LineNr"> 20 </span>
<span id="L21" class="LineNr"> 21 </span><span class="Type">statementList</span><span class="Statement">:</span>  <span class="Type">statement</span>
<span id="L22" class="LineNr"> 22 </span>  <span class="Statement">|</span> <span class="Type">statement</span> <span class="Type">statementList</span><span class="Statement">;</span>
<span id="L23" class="LineNr"> 23 </span>
<span id="L24" class="LineNr"> 24 </span><span class="Type">optStatementList</span><span class="Statement">:</span> <span class="Statement">(</span><span class="Type">statementList</span><span class="Statement">)?;</span>
<span id="L25" class="LineNr"> 25 </span>
<span id="L26" class="LineNr"> 26 </span><span class="Comment">// if statements</span>
<span id="L27" class="LineNr"> 27 </span><span class="Type">ifStatement</span><span class="Statement">:</span> <span class="PreProc">RUFF</span> <span class="PreProc">OP</span> <span class="Type">expr</span> <span class="PreProc">CP</span> <span class="Type">block</span> <span class="Type">optElseStatement</span><span class="Statement">;</span>
<span id="L28" class="LineNr"> 28 </span>
<span id="L29" class="LineNr"> 29 </span><span class="Type">elseStatement</span><span class="Statement">:</span> <span class="PreProc">RELSE</span> <span class="Type">ifStatement</span>
<span id="L30" class="LineNr"> 30 </span> <span class="Statement">|</span> <span class="PreProc">RELSE</span> <span class="Type">block</span><span class="Statement">;</span>
<span id="L31" class="LineNr"> 31 </span>
<span id="L32" class="LineNr"> 32 </span><span class="Type">optElseStatement</span><span class="Statement">:</span> <span class="Type">elseStatement</span><span class="Statement">?;</span>
<span id="L33" class="LineNr"> 33 </span>
<span id="L34" class="LineNr"> 34 </span><span class="Comment">// loops</span>
<span id="L35" class="LineNr"> 35 </span><span class="Type">whileLoop</span><span class="Statement">:</span> <span class="PreProc">WHILE</span> <span class="PreProc">OP</span> <span class="Type">expr</span> <span class="PreProc">CP</span> <span class="Type">block</span><span class="Statement">;</span>
<span id="L36" class="LineNr"> 36 </span>
<span id="L37" class="LineNr"> 37 </span><span class="Comment">// block</span>
<span id="L38" class="LineNr"> 38 </span><span class="Type">block</span><span class="Statement">:</span> <span class="PreProc">OCB</span> <span class="Type">optStatementList</span> <span class="PreProc">CCB</span><span class="Statement">;</span>
<span id="L39" class="LineNr"> 39 </span>
<span id="L40" class="LineNr"> 40 </span><span class="Comment">// expressions</span>
<span id="L41" class="LineNr"> 41 </span><span class="Type">expr</span><span class="Statement">:</span> <span class="Type">primary</span>
<span id="L42" class="LineNr"> 42 </span> <span class="Statement">|</span> <span class="Type">expr</span> <span class="Type">operator</span> <span class="Type">expr</span>
<span id="L43" class="LineNr"> 43 </span> <span class="Statement">|</span> <span class="Type">expr</span> <span class="Type">logicalOperator</span> <span class="Type">expr</span>
<span id="L44" class="LineNr"> 44 </span> <span class="Statement">|</span> <span class="Type">expr</span> <span class="Type">assignOperator</span> <span class="Type">expr</span>
<span id="L45" class="LineNr"> 45 </span> <span class="Statement">;</span>
<span id="L46" class="LineNr"> 46 </span>
<span id="L47" class="LineNr"> 47 </span> <span class="Type">optExprList</span><span class="Statement">:</span> <span class="Type">exprList</span><span class="Statement">?;</span>
<span id="L48" class="LineNr"> 48 </span> <span class="Type">exprList</span><span class="Statement">:</span> <span class="Type">expr</span>
<span id="L49" class="LineNr"> 49 </span>  <span class="Statement">|</span> <span class="Type">expr</span> <span class="PreProc">COMMA</span> <span class="Type">exprList</span>
<span id="L50" class="LineNr"> 50 </span>  <span class="Statement">;</span>
<span id="L51" class="LineNr"> 51 </span>
<span id="L52" class="LineNr"> 52 </span>
<span id="L53" class="LineNr"> 53 </span><span class="Type">assignOperator</span><span class="Statement">:</span> <span class="PreProc">EQ</span><span class="Statement">;</span>
<span id="L54" class="LineNr"> 54 </span><span class="Type">operator</span><span class="Statement">:</span> <span class="PreProc">PLUS</span> <span class="Statement">|</span> <span class="PreProc">MINUS</span> <span class="Statement">|</span> <span class="PreProc">TIMES</span> <span class="Statement">|</span> <span class="PreProc">DIVIDE</span><span class="Statement">;</span>
<span id="L55" class="LineNr"> 55 </span>
<span id="L56" class="LineNr"> 56 </span><span class="Type">logicalOperator</span><span class="Statement">:</span> <span class="PreProc">GREATER</span>
<span id="L57" class="LineNr"> 57 </span> <span class="Statement">|</span> <span class="PreProc">EQUALTO</span>
<span id="L58" class="LineNr"> 58 </span> <span class="Statement">|</span> <span class="PreProc">LESS</span>
<span id="L59" class="LineNr"> 59 </span> <span class="Statement">|</span> <span class="PreProc">STRICTGREATER</span>
<span id="L60" class="LineNr"> 60 </span> <span class="Statement">|</span> <span class="PreProc">STRICTLESS</span>
<span id="L61" class="LineNr"> 61 </span> <span class="Statement">|</span> <span class="PreProc">NOT</span>
<span id="L62" class="LineNr"> 62 </span> <span class="Statement">|</span> <span class="PreProc">OR</span>
<span id="L63" class="LineNr"> 63 </span> <span class="Statement">;</span>
<span id="L64" class="LineNr"> 64 </span>
<span id="L65" class="LineNr"> 65 </span><span class="Comment">// lambda</span>
<span id="L66" class="LineNr"> 66 </span><span class="Comment">// use the function keyword for lambdas too, but don't have</span>
<span id="L67" class="LineNr"> 67 </span><span class="Comment">// ID associated with them is only differnce</span>
<span id="L68" class="LineNr"> 68 </span><span class="Comment">// covers functionCall</span>
<span id="L69" class="LineNr"> 69 </span><span class="Type">lambdaCall</span><span class="Statement">:</span> <span class="Type">functionDeclaration</span> <span class="PreProc">OP</span> <span class="Type">optArgList</span> <span class="PreProc">CP</span><span class="Statement">;</span>
<span id="L70" class="LineNr"> 70 </span>
<span id="L71" class="LineNr"> 71 </span><span class="Comment">// declarations</span>
<span id="L72" class="LineNr"> 72 </span><span class="Type">functionDeclaration</span><span class="Statement">:</span> <span class="PreProc">TRICK</span> <span class="Type">optId</span> <span class="PreProc">OP</span> <span class="Type">optIdList</span> <span class="PreProc">CP</span> <span class="Type">block</span><span class="Statement">;</span>
<span id="L73" class="LineNr"> 73 </span>
<span id="L74" class="LineNr"> 74 </span><span class="Type">variableDeclaration</span><span class="Statement">:</span> <span class="PreProc">VAR</span> <span class="PreProc">ID</span> <span class="PreProc">EQ</span> <span class="Type">expr</span> <span class="PreProc">SEMI</span><span class="Statement">;</span>
<span id="L75" class="LineNr"> 75 </span>
<span id="L76" class="LineNr"> 76 </span><span class="Comment">// declaration components</span>
<span id="L77" class="LineNr"> 77 </span><span class="Type">argList</span><span class="Statement">:</span> <span class="Type">expr</span>
<span id="L78" class="LineNr"> 78 </span> <span class="Statement">|</span> <span class="Type">expr</span> <span class="PreProc">COMMA</span> <span class="Type">argList</span>
<span id="L79" class="LineNr"> 79 </span> <span class="Statement">;</span>
<span id="L80" class="LineNr"> 80 </span>
<span id="L81" class="LineNr"> 81 </span><span class="Type">optArgList</span><span class="Statement">:</span> <span class="Type">argList</span><span class="Statement">?;</span>
<span id="L82" class="LineNr"> 82 </span>
<span id="L83" class="LineNr"> 83 </span><span class="Type">idList</span><span class="Statement">:</span> <span class="PreProc">ID</span>
<span id="L84" class="LineNr"> 84 </span> <span class="Statement">|</span> <span class="PreProc">ID</span> <span class="PreProc">COMMA</span> <span class="Type">idList</span><span class="Statement">;</span>
<span id="L85" class="LineNr"> 85 </span>
<span id="L86" class="LineNr"> 86 </span><span class="Type">optId</span><span class="Statement">:</span> <span class="PreProc">ID</span><span class="Statement">?;</span>
<span id="L87" class="LineNr"> 87 </span>
<span id="L88" class="LineNr"> 88 </span><span class="Type">optIdList</span><span class="Statement">:</span> <span class="Type">idList</span><span class="Statement">?;</span>
<span id="L89" class="LineNr"> 89 </span>
<span id="L90" class="LineNr"> 90 </span><span class="Comment">// primaries</span>
<span id="L91" class="LineNr"> 91 </span><span class="Type">primary</span><span class="Statement">:</span> <span class="PreProc">ID</span>
<span id="L92" class="LineNr"> 92 </span> <span class="Statement">|</span> <span class="PreProc">STRING</span>
<span id="L93" class="LineNr"> 93 </span> <span class="Statement">|</span> <span class="PreProc">BOOLEAN</span>
<span id="L94" class="LineNr"> 94 </span> <span class="Statement">|</span> <span class="PreProc">INT</span>
<span id="L95" class="LineNr"> 95 </span> <span class="Statement">|</span> <span class="PreProc">OSQUARE</span> <span class="Type">argList</span> <span class="PreProc">CSQUARE</span>
<span id="L96" class="LineNr"> 96 </span> <span class="Statement">|</span> <span class="PreProc">OP</span> <span class="Type">expr</span> <span class="PreProc">CP</span>
<span id="L97" class="LineNr"> 97 </span> <span class="Statement">|</span> <span class="Type">lambdaCall</span>
<span id="L98" class="LineNr"> 98 </span> <span class="Statement">|</span> <span class="Type">functionDeclaration</span>
<span id="L99" class="LineNr"> 99 </span> <span class="Statement">|</span> <span class="PreProc">ID</span> <span class="PreProc">OP</span> <span class="Type">optArgList</span> <span class="PreProc">CP</span>
<span id="L100" class="LineNr">100 </span> <span class="Statement">|</span> <span class="PreProc">ID</span> <span class="PreProc">OSQUARE</span> <span class="Type">expr</span> <span class="PreProc">CSQUARE</span>
<span id="L101" class="LineNr">101 </span> <span class="Statement">;</span>
<span id="L102" class="LineNr">102 </span>
<span id="L103" class="LineNr">103 </span>
<span id="L104" class="LineNr">104 </span><span class="PreProc">BR</span><span class="Statement">:</span> <span class="Constant">'</span><span class="Special">\n</span><span class="Constant">'</span><span class="Statement">;</span>
<span id="L105" class="LineNr">105 </span><span class="PreProc">CCB</span><span class="Statement">:</span><span class="Constant">'}'</span><span class="Statement">;</span>
<span id="L106" class="LineNr">106 </span><span class="PreProc">COMMA</span><span class="Statement">:</span><span class="Constant">','</span><span class="Statement">;</span>
<span id="L107" class="LineNr">107 </span><span class="PreProc">CP</span><span class="Statement">:</span><span class="Constant">')'</span><span class="Statement">;</span>
<span id="L108" class="LineNr">108 </span><span class="PreProc">CSQUARE</span><span class="Statement">:</span><span class="Constant">']'</span><span class="Statement">;</span>
<span id="L109" class="LineNr">109 </span><span class="PreProc">DIVIDE</span><span class="Statement">:</span> <span class="Constant">'/'</span><span class="Statement">;</span>
<span id="L110" class="LineNr">110 </span><span class="PreProc">EQ</span><span class="Statement">:</span><span class="Constant">'='</span><span class="Statement">;</span>
<span id="L111" class="LineNr">111 </span><span class="PreProc">MINUS</span><span class="Statement">:</span> <span class="Constant">'-'</span><span class="Statement">;</span>
<span id="L112" class="LineNr">112 </span><span class="PreProc">OCB</span><span class="Statement">:</span><span class="Constant">'{'</span><span class="Statement">;</span>
<span id="L113" class="LineNr">113 </span><span class="PreProc">OP</span><span class="Statement">:</span><span class="Constant">'('</span><span class="Statement">;</span>
<span id="L114" class="LineNr">114 </span><span class="PreProc">OSQUARE</span><span class="Statement">:</span><span class="Constant">'['</span><span class="Statement">;</span>
<span id="L115" class="LineNr">115 </span><span class="PreProc">PLUS</span><span class="Statement">:</span> <span class="Constant">'+'</span><span class="Statement">;</span>
<span id="L116" class="LineNr">116 </span><span class="PreProc">SEMI</span><span class="Statement">:</span> <span class="Constant">';'</span><span class="Statement">;</span>
<span id="L117" class="LineNr">117 </span><span class="PreProc">STRICTGREATER</span><span class="Statement">:</span><span class="Constant">'&gt;'</span><span class="Statement">;</span>
<span id="L118" class="LineNr">118 </span><span class="PreProc">STRICTLESS</span><span class="Statement">:</span><span class="Constant">'&lt;'</span><span class="Statement">;</span>
<span id="L119" class="LineNr">119 </span><span class="PreProc">TIMES</span><span class="Statement">:</span> <span class="Constant">'*'</span><span class="Statement">;</span>
<span id="L120" class="LineNr">120 </span><span class="PreProc">EQUALTO</span><span class="Statement">:</span><span class="Constant">'=='</span><span class="Statement">;</span>
<span id="L121" class="LineNr">121 </span><span class="PreProc">GREATER</span><span class="Statement">:</span><span class="Constant">'&gt;='</span><span class="Statement">;</span>
<span id="L122" class="LineNr">122 </span><span class="PreProc">LESS</span><span class="Statement">:</span><span class="Constant">'&lt;='</span><span class="Statement">;</span>
<span id="L123" class="LineNr">123 </span><span class="PreProc">NOT</span><span class="Statement">:</span><span class="Constant">'!='</span><span class="Statement">;</span>
<span id="L124" class="LineNr">124 </span><span class="PreProc">OR</span><span class="Statement">:</span><span class="Constant">'||'</span><span class="Statement">;</span>
<span id="L125" class="LineNr">125 </span><span class="PreProc">AND</span><span class="Statement">:</span> <span class="Constant">'&amp;&amp;'</span><span class="Statement">;</span>
<span id="L126" class="LineNr">126 </span><span class="PreProc">RUFF</span><span class="Statement">:</span><span class="Constant">'ruff'</span><span class="Statement">;</span>
<span id="L127" class="LineNr">127 </span><span class="PreProc">RELSE</span><span class="Statement">:</span><span class="Constant">'relse'</span><span class="Statement">;</span>
<span id="L128" class="LineNr">128 </span><span class="PreProc">TREAT</span><span class="Statement">:</span><span class="Constant">'treat'</span><span class="Statement">;</span>
<span id="L129" class="LineNr">129 </span><span class="PreProc">TRICK</span><span class="Statement">:</span><span class="Constant">'trick'</span><span class="Statement">;</span>
<span id="L130" class="LineNr">130 </span><span class="PreProc">WHILE</span><span class="Statement">:</span><span class="Constant">'while'</span><span class="Statement">;</span>
<span id="L131" class="LineNr">131 </span><span class="PreProc">BOOLEAN</span><span class="Statement">:</span> <span class="Constant">'true'</span> <span class="Statement">|</span> <span class="Constant">'false'</span><span class="Statement">;</span>
<span id="L132" class="LineNr">132 </span><span class="PreProc">INT</span><span class="Statement">:</span> <span class="Statement">[</span>0-9<span class="Statement">]</span><span class="Statement">+;</span>
<span id="L133" class="LineNr">133 </span><span class="PreProc">ID</span><span class="Statement">:</span> <span class="Statement">[</span>a-zA-Z$_<span class="Statement">]</span> <span class="Statement">[</span>a-zA-Z0-9$_<span class="Statement">]</span><span class="Statement">*;</span>
<span id="L134" class="LineNr">134 </span><span class="PreProc">STRING</span><span class="Statement">:</span> <span class="Constant">'&quot;'</span> <span class="Statement">(</span> <span class="PreProc">ESC_SEQ</span> <span class="Statement">|</span> <span class="Statement">~(</span><span class="Constant">'</span><span class="Special">\\</span><span class="Constant">'</span><span class="Statement">|</span><span class="Constant">'&quot;'</span><span class="Statement">)</span> <span class="Statement">)*</span> <span class="Constant">'&quot;'</span>
<span id="L135" class="LineNr">135 </span>   <span class="Statement">|</span>   <span class="Constant">'</span><span class="Special">\'</span><span class="Constant">'</span> <span class="Statement">(</span> <span class="PreProc">ESC_SEQ</span> <span class="Statement">|</span> <span class="Statement">~(</span><span class="Constant">'</span><span class="Special">\\</span><span class="Constant">'</span><span class="Statement">|</span><span class="Constant">'</span><span class="Special">\'</span><span class="Constant">'</span><span class="Statement">)</span> <span class="Statement">)*</span> <span class="Constant">'</span><span class="Special">\'</span><span class="Constant">'</span>
<span id="L136" class="LineNr">136 </span>   <span class="Statement">;</span>
<span id="L137" class="LineNr">137 </span>
<span id="L138" class="LineNr">138 </span><span class="PreProc">ESC_SEQ</span>
<span id="L139" class="LineNr">139 </span>   <span class="Statement">:</span> <span class="Constant">'</span><span class="Special">\\</span><span class="Constant">'</span> <span class="Statement">(</span><span class="Constant">'</span><span class="Special">\&quot;</span><span class="Constant">'</span><span class="Statement">|</span><span class="Constant">'</span><span class="Special">\\</span><span class="Constant">'</span><span class="Statement">|</span><span class="Constant">'/'</span><span class="Statement">|</span><span class="Constant">'b'</span><span class="Statement">|</span><span class="Constant">'f'</span><span class="Statement">|</span><span class="Constant">'n'</span><span class="Statement">|</span><span class="Constant">'r'</span><span class="Statement">|</span><span class="Constant">'t'</span><span class="Statement">)</span>
<span id="L140" class="LineNr">140 </span>   <span class="Statement">;</span>
<span id="L141" class="LineNr">141 </span>
<span id="L142" class="LineNr">142 </span>
</pre>
</body>
</html>
<!-- vim: set foldmethod=manual : -->
